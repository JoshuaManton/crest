: main
# allocate our stack frame
adduim rsp rsp 0
mov rfp rsp

# Site{filename = demo2.cr, line = 2, column = 5}
# return expression
# save registers
# save our stack frame
push64u rfp
# push parameters
movsim r1 6
push16s r1
# save return address
push64u rip
# call factorial
goto factorial
# pop return value
pop16s r1
# restore our stack frame
pop64u rfp
# restore saved registers
# pop our stack frame
movuim rim 0
subu rsp rsp rim
# push return value
push16s r1
quit
# pop our stack frame
movuim rim 0
subu rsp rsp rim
quit
: factorial
# save return address
pop64u r1
# allocate our stack frame
adduim rsp rsp 0
mov rfp rsp

# Site{filename = demo2.cr, line = 6, column = 5}
addsim r3 rfp -2
ld16s r2 r3
movsim r3 1
eq r4 r2 r3
jeq if_1 r4 rz

# Site{filename = demo2.cr, line = 7, column = 9}
# return expression
movsim r2 1
# pop our stack frame
movuim rim 2
subu rsp rsp rim
# push return value
push16s r2
# jump to return address
adduim r1 r1 1
mov rip r1
: if_1

# Site{filename = demo2.cr, line = 9, column = 5}
# return expression
addsim r4 rfp -2
ld16s r3 r4
# save registers
push64u r1
push16s r2
push16s r3
# save our stack frame
push64u rfp
# push parameters
addsim r5 rfp -2
ld16s r4 r5
movsim r5 1
subs r6 r4 r5
push16s r6
# save return address
push64u rip
# call factorial
goto factorial
# pop return value
pop16s r4
# restore our stack frame
pop64u rfp
# restore saved registers
pop16s r3
pop16s r2
pop64u r1
muls r5 r3 r4
# pop our stack frame
movuim rim 2
subu rsp rsp rim
# push return value
push16s r5
# jump to return address
adduim r1 r1 1
mov rip r1
# pop our stack frame
movuim rim 2
subu rsp rsp rim
# jump to return address
adduim r1 r1 1
mov rip r1

720
